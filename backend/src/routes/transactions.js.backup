const express = require('express');
const Transaction = require('../models/Transaction');
const Categorie = require('../models/Categorie');
const { auth } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Transactions
 *   description: Gestion des transactions financi√®res
 */

// Appliquer l'authentification √† toutes les routes
router.use(auth);

/**
 * @swagger
 * /api/transactions:
 *   get:
 *     summary: Obtenir toutes les transactions de l'utilisateur
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Num√©ro de page
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 20
 *         description: Nombre d'√©l√©ments par page
 *       - in: query
 *         name: type
 *         schema:
 *           type: string
 *           enum: [revenu, depense]
 *         description: Filtrer par type de transaction
 *       - in: query
 *         name: categoryId
 *         schema:
 *           type: integer
 *         description: Filtrer par ID de cat√©gorie
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Date de d√©but (YYYY-MM-DD)
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Date de fin (YYYY-MM-DD)
 *     responses:
 *       200:
 *         description: Liste des transactions r√©cup√©r√©e avec succ√®s
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 transactions:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Transaction'
 *                 pagination:
 *                   type: object
 *                   properties:
 *                     page:
 *                       type: integer
 *                     limit:
 *                       type: integer
 *       401:
 *         description: Token invalide ou manquant
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
// Obtenir toutes les transactions de l'utilisateur
router.get('/', async (req, res, next) => {
  try {
    const { page = 1, limit = 20, type, categoryId, startDate, endDate } = req.query;
    
    const transactions = await Transaction.trouverParUtilisateur(req.utilisateur_id, {
      page: parseInt(page),
      limit: parseInt(limit),
      type,
      categorie_id: categoryId,
      startDate,
      endDate
    });

    res.json({
      transactions,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit)
      }
    });
  } catch (erreur) {
    next(erreur);
  }
});

// Obtenir une transaction sp√©cifique
router.get('/:id', auth, async (req, res, next) => {
  try {
    const transaction = await Transaction.trouverParId(req.params.id, req.utilisateur_id);
    
    if (!transaction) {
      return res.status(404).json({
        message: 'Transaction non trouv√©e'
      });
    }

    res.json({ transaction });
  } catch (erreur) {
    next(erreur);
  }
});

/**
 * @swagger
 * /api/transactions:
 *   post:
 *     summary: Cr√©er une nouvelle transaction
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - type
 *               - amount
 *               - categoryId
 *               - date
 *             properties:
 *               type:
 *                 type: string
 *                 enum: [revenu, depense]
 *                 example: depense
 *               amount:
 *                 type: number
 *                 minimum: 0
 *                 example: 25.50
 *               categoryId:
 *                 type: integer
 *                 example: 1
 *               description:
 *                 type: string
 *                 example: D√©jeuner au restaurant
 *               date:
 *                 type: string
 *                 format: date
 *                 example: "2024-08-21"
 *     responses:
 *       201:
 *         description: Transaction cr√©√©e avec succ√®s
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Transaction cr√©√©e avec succ√®s
 *                 transaction:
 *                   $ref: '#/components/schemas/Transaction'
 *       400:
 *         description: Donn√©es invalides
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Cat√©gorie non trouv√©e
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
// Cr√©er une nouvelle transaction
router.post('/', auth, async (req, res, next) => {
  try {
    const { type, amount, categoryId, description, date } = req.body;

    // Validation des donn√©es
    if (!type || !amount || !categoryId || !date) {
      return res.status(400).json({
        message: 'Type, montant, cat√©gorie et date sont requis'
      });
    }

    if (!['revenu', 'depense'].includes(type)) {
      return res.status(400).json({
        message: 'Le type doit √™tre "revenu" ou "depense"'
      });
    }

    if (amount <= 0) {
      return res.status(400).json({
        message: 'Le montant doit √™tre positif'
      });
    }

    // V√©rifier que la cat√©gorie appartient √† l'utilisateur et correspond au type
    const categorie = await Categorie.trouverParId(categoryId);
    if (!categorie || categorie.utilisateur_id !== req.utilisateur_id) {
      return res.status(404).json({
        message: 'Cat√©gorie non trouv√©e'
      });
    }

    // Gestion spÈciale pour les catÈgories hybrides`n    if (categorie.type === 'hybride') {`n      // Les catÈgories hybrides acceptent les transactions de type 'revenu' ou 'depense'`n      if (!['revenu', 'depense'].includes(type)) {`n        return res.status(400).json({`n          message: 'Le type de la transaction doit Ítre \"revenu\" ou \"depense\"'`n        });`n      }`n    } else if (categorie.type !== type) {
      return res.status(400).json({
        message: 'Le type de la cat√©gorie ne correspond pas au type de la transaction'
      });
    }

    // Cr√©er la transaction
    const nouvelleTransaction = await Transaction.creer({
      utilisateur_id: req.utilisateur_id,
      categorie_id: categoryId,
      type,
      montant: parseFloat(amount),
      description: description || '',
      date_transaction: date
    });

    res.status(201).json({
      message: 'Transaction cr√©√©e avec succ√®s',
      transaction: nouvelleTransaction
    });
  } catch (erreur) {
    next(erreur);
  }
});

/**
 * @swagger
 * /api/transactions/{id}:
 *   put:
 *     summary: Modifier une transaction existante
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID de la transaction √† modifier
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - type
 *               - amount
 *               - categoryId
 *               - date
 *             properties:
 *               type:
 *                 type: string
 *                 enum: [revenu, depense]
 *                 example: depense
 *               amount:
 *                 type: number
 *                 minimum: 0
 *                 example: 25.50
 *               categoryId:
 *                 type: integer
 *                 example: 1
 *               description:
 *                 type: string
 *                 example: D√©jeuner au restaurant
 *               date:
 *                 type: string
 *                 format: date
 *                 example: "2024-08-21"
 *     responses:
 *       200:
 *         description: Transaction modifi√©e avec succ√®s
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Transaction modifi√©e avec succ√®s
 *                 transaction:
 *                   $ref: '#/components/schemas/Transaction'
 *       400:
 *         description: Donn√©es invalides
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Transaction ou cat√©gorie non trouv√©e
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
// Modifier une transaction
router.put('/:id', auth, async (req, res, next) => {
  try {
    const { type, amount, categoryId, description, date } = req.body;

    // Trouver la transaction
    const transaction = await Transaction.trouverParId(req.params.id, req.utilisateur_id);
    if (!transaction) {
      return res.status(404).json({
        message: 'Transaction non trouv√©e'
      });
    }

    // Validation des donn√©es
    if (!type || !amount || !categoryId || !date) {
      return res.status(400).json({
        message: 'Type, montant, cat√©gorie et date sont requis'
      });
    }

    if (!['revenu', 'depense'].includes(type)) {
      return res.status(400).json({
        message: 'Le type doit √™tre "revenu" ou "depense"'
      });
    }

    if (amount <= 0) {
      return res.status(400).json({
        message: 'Le montant doit √™tre positif'
      });
    }

    // V√©rifier que la cat√©gorie appartient √† l'utilisateur et correspond au type
    const categorie = await Categorie.trouverParId(categoryId);
    if (!categorie || categorie.utilisateur_id !== req.utilisateur_id) {
      return res.status(404).json({
        message: 'Cat√©gorie non trouv√©e'
      });
    }

    // Gestion spÈciale pour les catÈgories hybrides`n    if (categorie.type === 'hybride') {`n      // Les catÈgories hybrides acceptent les transactions de type 'revenu' ou 'depense'`n      if (!['revenu', 'depense'].includes(type)) {`n        return res.status(400).json({`n          message: 'Le type de la transaction doit Ítre \"revenu\" ou \"depense\"'`n        });`n      }`n    } else if (categorie.type !== type) {
      return res.status(400).json({
        message: 'Le type de la cat√©gorie ne correspond pas au type de la transaction'
      });
    }

    // Mettre √† jour la transaction
    await transaction.mettreAJour({
      categorie_id: categoryId,
      type,
      montant: parseFloat(amount),
      description: description || '',
      date_transaction: date
    });

    res.json({
      message: 'Transaction modifi√©e avec succ√®s',
      transaction
    });
  } catch (erreur) {
    next(erreur);
  }
});

/**
 * @swagger
 * /api/transactions/{id}:
 *   delete:
 *     summary: Supprimer une transaction
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID de la transaction √† supprimer
 *     responses:
 *       200:
 *         description: Transaction supprim√©e avec succ√®s
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Transaction supprim√©e avec succ√®s
 *       404:
 *         description: Transaction non trouv√©e
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
// Supprimer une transaction
router.delete('/:id', auth, async (req, res, next) => {
  try {
    const transaction = await Transaction.trouverParId(req.params.id, req.utilisateur_id);
    
    if (!transaction) {
      return res.status(404).json({
        message: 'Transaction non trouv√©e'
      });
    }

    await transaction.supprimer();

    res.json({
      message: 'Transaction supprim√©e avec succ√®s'
    });
  } catch (erreur) {
    next(erreur);
  }
});

// Obtenir le solde
router.get('/balance/summary', async (req, res, next) => {
  try {
    const solde = await Transaction.obtenirSolde(req.utilisateur_id);
    const total_revenus = await Transaction.obtenirTotalRevenus(req.utilisateur_id);
    const total_depenses = await Transaction.obtenirTotalDepenses(req.utilisateur_id);
    
    res.json({ 
      solde,
      total_revenus,
      total_depenses
    });
  } catch (erreur) {
    next(erreur);
  }
});

// Obtenir les statistiques mensuelles
router.get('/stats/monthly/:year/:month', async (req, res, next) => {
  try {
    const { year, month } = req.params;
    
    const statistiques = await Transaction.obtenirStatistiquesMensuelles(
      req.utilisateur_id,
      parseInt(year),
      parseInt(month)
    );

    res.json({
      annee: parseInt(year),
      mois: parseInt(month),
      statistiques
    });
  } catch (erreur) {
    next(erreur);
  }
});

// Obtenir les d√©penses par cat√©gorie
router.get('/stats/by-category', async (req, res, next) => {
  try {
    const { startDate, endDate } = req.query;

    if (!startDate || !endDate) {
      return res.status(400).json({
        message: 'Date de d√©but et date de fin requises'
      });
    }

    const depensesParCategorie = await Transaction.obtenirDepensesParCategorie(
      req.utilisateur_id,
      startDate,
      endDate
    );

    res.json({
      depenses_par_categorie: depensesParCategorie
    });
  } catch (erreur) {
    next(erreur);
  }
});

// Obtenir l'√©volution mensuelle
router.get('/stats/trend/:year', async (req, res, next) => {
  try {
    const { year } = req.params;
    
    const evolutionMensuelle = await Transaction.obtenirEvolutionMensuelle(
      req.utilisateur_id,
      parseInt(year)
    );

    res.json({
      annee: parseInt(year),
      evolution_mensuelle: evolutionMensuelle
    });
  } catch (erreur) {
    next(erreur);
  }
});

/**
 * @swagger
 * /api/transactions/by-category/{categoryId}:
 *   get:
 *     summary: Obtenir les transactions par cat√©gorie
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: categoryId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID de la cat√©gorie
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Num√©ro de page
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 20
 *         description: Nombre d'√©l√©ments par page
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Date de d√©but (YYYY-MM-DD)
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Date de fin (YYYY-MM-DD)
 *     responses:
 *       200:
 *         description: Transactions par cat√©gorie r√©cup√©r√©es avec succ√®s
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 transactions:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Transaction'
 *                 pagination:
 *                   type: object
 *                   properties:
 *                     page:
 *                       type: integer
 *                     limit:
 *                       type: integer
 *       404:
 *         description: Cat√©gorie non trouv√©e
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
// Obtenir les transactions par cat√©gorie
router.get('/by-category/:categoryId', auth, async (req, res, next) => {
  try {
    const { categoryId } = req.params;
    const { page = 1, limit = 20, startDate, endDate } = req.query;

    // V√©rifier que la cat√©gorie appartient √† l'utilisateur
    const categorie = await Categorie.trouverParId(categoryId);
    if (!categorie || categorie.utilisateur_id !== req.utilisateur_id) {
      return res.status(404).json({
        message: 'Cat√©gorie non trouv√©e'
      });
    }

    const transactions = await Transaction.trouverParUtilisateur(req.utilisateur_id, {
      page: parseInt(page),
      limit: parseInt(limit),
      categorie_id: categoryId,
      startDate,
      endDate
    });

    res.json({
      transactions,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit)
      }
    });
  } catch (erreur) {
    next(erreur);
  }
});

module.exports = router;
